<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"

       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <import resource="classpath*:amqp/mr-x-commons-amqp-context.xml"/>
    <!--<import resource="classpath*:spring/redis/apollo-common-redis-context.xml"/>-->
    <import resource="classpath*:spring/redis/ha/mr-x-commons-redisHA-context.xml"/>
    <!--注解配置-->
    <context:annotation-config/>
    <context:component-scan base-package="mr.x.commons.*"/>
    <!--加载数据库配置文件-->
    <context:property-placeholder location="classpath:commons_config.properties" ignore-unresolvable="true"/>

    <!--Druid 日志 filter-->
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <property name="dataSourceLogEnabled" value="true"/>
        <property name="connectionLogEnabled" value="true"/>
        <property name="connectionLogErrorEnabled" value="true"/>
        <property name="statementLogEnabled" value="false"/>
        <property name="statementLogErrorEnabled" value="true"/>
        <property name="resultSetLogEnabled" value="true"/>
        <property name="resultSetLogErrorEnabled" value="true"/>
    </bean>

    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="slowSqlMillis" value="3000"/>
        <property name="logSlowSql" value="true"/>
        <property name="mergeSql" value="false"/>
    </bean>


    <!--主库数据源-->
    <bean id="writeDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc_url}" />
        <property name="username" value="${jdbc_user}" />
        <property name="password" value="${jdbc_password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="config" />
        <property name="proxyFilters">
            <list>
                <ref bean="log-filter"/>
                <ref bean="stat-filter"/>
            </list>
        </property>
    </bean>

    <!--从库数据源-->
    <bean id="readDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="filters" value="config"/>
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc_url}" />
        <property name="username" value="${jdbc_user}" />
        <property name="password" value="${jdbc_password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <property name="proxyFilters">
            <list>
                <ref bean="log-filter"/>
                <ref bean="stat-filter"/>
            </list>
        </property>
    </bean>


    <bean id="readDataSource_1" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="filters" value="config"/>
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc_url}" />
        <property name="username" value="${jdbc_user}" />
        <property name="password" value="${jdbc_password}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <property name="proxyFilters">
            <list>
                <ref bean="log-filter"/>
                <ref bean="stat-filter"/>
            </list>
        </property>
    </bean>
    <bean id="writeJdbcTemplate" class="mr.x.commons.dao.LegoJdbcTemplate">
        <property name="weight" value="100"/>
        <property name="dataSource" ref="writeDataSource"/>
    </bean>
    <bean id="readJdbcTemplate" class="mr.x.commons.dao.LegoJdbcTemplate">
        <property name="weight" value="50"/>
        <property name="dataSource" ref="readDataSource"/>
    </bean>

    <bean id="readJdbcTemplate_1" class="mr.x.commons.dao.LegoJdbcTemplate">
        <property name="weight" value="50"/>
        <property name="dataSource" ref="readDataSource_1"/>
    </bean>


    <bean id="jdbcTemplateFactory" class="mr.x.commons.dao.JdbcTemplateFactory">
        <constructor-arg name="writeJdbcTemplate">
            <ref bean="writeJdbcTemplate"/>
        </constructor-arg>
        <constructor-arg name="readJdbcTemplates">
            <list value-type="mr.x.commons.dao.LegoJdbcTemplate">
                <ref bean="readJdbcTemplate"/>
                <ref bean="readJdbcTemplate_1"/>
            </list>
        </constructor-arg>
    </bean>
    <bean id="baseDAO" class="mr.x.commons.dao.BaseDAO">
        <property name="jdbcTemplateFactory" ref="jdbcTemplateFactory"/>
    </bean>

    <!-- Default HTTP Client  -->

    <bean id="accessLog" class="mr.x.commons.httpclient.DefaultHttpClientLog"/>
    <bean id="apolloHttpClient" class="mr.x.commons.httpclient.ApacheHttpClient"
          c:maxConPerHost="300"
          c:conTimeOutMs="2000"
          c:soTimeOutMs="2000"
          c:maxSize="1048576"
          p:accessLog-ref="accessLog"
            />

    <!--开启事务支持-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="writeDataSource"/>
    </bean>
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="*" read-only="false"/>
        </tx:attributes>
    </tx:advice>

    <!--spring 的任务调度-->
    <!--<task:annotation-driven executor="apolloExecutor" scheduler="apolloScheduler"/>-->

    <!--<task:executor id="apolloExecutor" pool-size="5-25"-->
    <!--queue-capacity="100" rejection-policy="CALLER_RUNS"/>-->
    <!--<task:scheduler id="apolloScheduler" pool-size="5"/>-->
</beans>
