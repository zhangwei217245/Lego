<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"

       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

    <!-- redis配置 -->
    <!-- 开启ignore-unresolvable＝true是为了防止其他spring配置文件开启了property-placeholder后导致其他的property configurer失效 -->
    <context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"/>

    <!-- Apollo Redis Handler Factory 通过它可以获取各个业务的redis handler-->
    <bean class="mr.x.commons.redis.jedis.LegoRedisHandlerFactory"/>

    <!-- Overall jedisPoolConfig settings -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"
          p:maxTotal="${redis.pool.maxTotal}"
          p:maxIdle="${redis.pool.maxIdle}"
          p:maxWaitMillis="${redis.pool.maxWaitMillis}"
          p:testOnBorrow="${redis.pool.testOnBorrow}"
            />

    <bean id="defaultRedisSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>

    <bean id="keyRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>


    <!-- base redis template start -->
    <bean id="baseJedisConnectionFactory"
          class="org.springframework.data.redis.connection.repackage.release_1_2_0.ha.JedisHAProxy"
          p:usePool="true"
          p:poolConfig-ref="jedisPoolConfig"
          p:connectionString="${redis.base}"/>

    <bean id="baseRedisTemplate"
          class="org.springframework.data.redis.core.RedisTemplate"
          p:defaultSerializer-ref="defaultRedisSerializer"
          p:keySerializer-ref="keyRedisSerializer"
          p:connectionFactory-ref="baseJedisConnectionFactory"/>
    <!-- base redis template end -->

    <!-- counter redis template start-->
    <bean id="counterJedisConnectionFactory"
          class="org.springframework.data.redis.connection.repackage.release_1_2_0.ha.JedisHAProxy"
          p:usePool="true"
          p:poolConfig-ref="jedisPoolConfig"
          p:connectionString="${redis.counter}"/>

    <bean id="counterRedisTemplate"
          class="org.springframework.data.redis.core.RedisTemplate"
          p:defaultSerializer-ref="defaultRedisSerializer"
          p:keySerializer-ref="keyRedisSerializer"
          p:connectionFactory-ref="counterJedisConnectionFactory"/>
    <!-- counter redis template end-->

    <!-- user redis template start-->
    <bean id="userJedisConnectionFactory"
          class="org.springframework.data.redis.connection.repackage.release_1_2_0.ha.JedisHAProxy"
          p:usePool="true"
          p:poolConfig-ref="jedisPoolConfig"
          p:connectionString="${redis.user}"/>

    <bean id="userRedisTemplate"
          class="org.springframework.data.redis.core.RedisTemplate"
          p:defaultSerializer-ref="defaultRedisSerializer"
          p:keySerializer-ref="keyRedisSerializer"
          p:connectionFactory-ref="userJedisConnectionFactory"/>
    <!-- user redis template end-->

    <!-- relation redis template start-->
    <bean id="relationJedisConnectionFactory"
          class="org.springframework.data.redis.connection.repackage.release_1_2_0.ha.JedisHAProxy"
          p:usePool="true"
          p:poolConfig-ref="jedisPoolConfig"
          p:connectionString="${redis.relation}"/>

    <bean id="relationRedisTemplate"
          class="org.springframework.data.redis.core.RedisTemplate"
          p:defaultSerializer-ref="defaultRedisSerializer"
          p:keySerializer-ref="keyRedisSerializer"
          p:connectionFactory-ref="relationJedisConnectionFactory"/>
    <!-- relation redis template end-->

    <!-- restaurantId redis template start-->
    <bean id="restaurantJedisConnectionFactory"
          class="org.springframework.data.redis.connection.repackage.release_1_2_0.ha.JedisHAProxy"
          p:usePool="true"
          p:poolConfig-ref="jedisPoolConfig"
          p:connectionString="${redis.restaurant}"/>

    <bean id="restaurantRedisTemplate"
          class="org.springframework.data.redis.core.RedisTemplate"
          p:defaultSerializer-ref="defaultRedisSerializer"
          p:keySerializer-ref="keyRedisSerializer"
          p:connectionFactory-ref="restaurantJedisConnectionFactory"/>
    <!-- restaurantId redis template end-->

    <!-- list redis template start-->
    <bean id="rankingListJedisConnectionFactory"
          class="org.springframework.data.redis.connection.repackage.release_1_2_0.ha.JedisHAProxy"
          p:usePool="true"
          p:poolConfig-ref="jedisPoolConfig"
          p:connectionString="${redis.list}"/>

    <bean id="rankinglistRedisTemplate"
          class="org.springframework.data.redis.core.RedisTemplate"
          p:defaultSerializer-ref="defaultRedisSerializer"
          p:keySerializer-ref="keyRedisSerializer"
          p:connectionFactory-ref="rankingListJedisConnectionFactory"/>
    <!-- list redis template end-->

    <!-- comment redis template start-->
    <bean id="commentJedisConnectionFactory"
          class="org.springframework.data.redis.connection.repackage.release_1_2_0.ha.JedisHAProxy"
          p:usePool="true"
          p:poolConfig-ref="jedisPoolConfig"
          p:connectionString="${redis.comment}"/>

    <bean id="commentRedisTemplate"
          class="org.springframework.data.redis.core.RedisTemplate"
          p:defaultSerializer-ref="defaultRedisSerializer"
          p:keySerializer-ref="keyRedisSerializer"
          p:connectionFactory-ref="commentJedisConnectionFactory"/>
    <!-- comment redis template end-->

    <!-- feed redis template start-->
    <bean id="feedJedisConnectionFactory"
          class="org.springframework.data.redis.connection.repackage.release_1_2_0.ha.JedisHAProxy"
          p:usePool="true"
          p:poolConfig-ref="jedisPoolConfig"
          p:connectionString="${redis.feed}"/>

    <bean id="feedRedisTemplate"
          class="org.springframework.data.redis.core.RedisTemplate"
          p:defaultSerializer-ref="defaultRedisSerializer"
          p:keySerializer-ref="keyRedisSerializer"
          p:connectionFactory-ref="feedJedisConnectionFactory"/>
    <!-- feed redis template end-->

    <!-- notification redis template start-->
    <bean id="notificationJedisConnectionFactory"
          class="org.springframework.data.redis.connection.repackage.release_1_2_0.ha.JedisHAProxy"
          p:usePool="true"
          p:poolConfig-ref="jedisPoolConfig"
          p:connectionString="${redis.notification}"/>

    <bean id="notificationRedisTemplate"
          class="org.springframework.data.redis.core.RedisTemplate"
          p:defaultSerializer-ref="defaultRedisSerializer"
          p:keySerializer-ref="keyRedisSerializer"
          p:connectionFactory-ref="notificationJedisConnectionFactory"/>
    <!-- notification redis template end-->


    <!-- recommendation redis template start-->
    <bean id="recommendationJedisConnectionFactory"
          class="org.springframework.data.redis.connection.repackage.release_1_2_0.ha.JedisHAProxy"
          p:usePool="true"
          p:poolConfig-ref="jedisPoolConfig"
          p:connectionString="${redis.recommendation}"/>

    <bean id="recommendationRedisTemplate"
          class="org.springframework.data.redis.core.RedisTemplate"
          p:defaultSerializer-ref="defaultRedisSerializer"
          p:keySerializer-ref="keyRedisSerializer"
          p:connectionFactory-ref="recommendationJedisConnectionFactory"/>
    <!-- recommendation redis template end-->


    <!-- expire redis template start-->
    <bean id="expireJedisConnectionFactory"
          class="org.springframework.data.redis.connection.repackage.release_1_2_0.ha.JedisHAProxy"
          p:usePool="true"
          p:poolConfig-ref="jedisPoolConfig"
          p:connectionString="${redis.expire}"/>

    <bean id="expireRedisTemplate"
          class="org.springframework.data.redis.core.RedisTemplate"
          p:defaultSerializer-ref="defaultRedisSerializer"
          p:keySerializer-ref="keyRedisSerializer"
          p:connectionFactory-ref="expireJedisConnectionFactory"/>
    <!-- expire redis template end-->


    <!-- favorite redis template start-->
    <bean id="favoriteJedisConnectionFactory"
          class="org.springframework.data.redis.connection.repackage.release_1_2_0.ha.JedisHAProxy"
          p:usePool="true"
          p:poolConfig-ref="jedisPoolConfig"
          p:connectionString="${redis.favorite}"/>

    <bean id="favoriteRedisTemplate"
          class="org.springframework.data.redis.core.RedisTemplate"
          p:defaultSerializer-ref="defaultRedisSerializer"
          p:keySerializer-ref="keyRedisSerializer"
          p:connectionFactory-ref="favoriteJedisConnectionFactory"/>
    <!-- test redis template end-->


    <!-- test redis template start-->
    <bean id="testJedisConnectionFactory"
          class="org.springframework.data.redis.connection.repackage.release_1_2_0.ha.JedisHAProxy"
          p:usePool="true"
          p:poolConfig-ref="jedisPoolConfig"
          p:connectionString="${redis.test}"/>

    <bean id="testRedisTemplate"
          class="org.springframework.data.redis.core.RedisTemplate"
          p:defaultSerializer-ref="defaultRedisSerializer"
          p:keySerializer-ref="keyRedisSerializer"
          p:connectionFactory-ref="testJedisConnectionFactory"/>
    <!-- test redis template end-->

</beans>